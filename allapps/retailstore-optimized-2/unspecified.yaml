apiVersion: v1
kind: Namespace
metadata:
  name: retailstore-unspecified
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: catalog
    helm.sh/chart: catalog-0.8.4
  name: catalog
  namespace: retailstore-unspecified
---
apiVersion: v1
data:
  password: NVlGTWRva2taTWVDeWhpaw==
  username: Y2F0YWxvZw==
kind: Secret
metadata:
  name: catalog-db
  namespace: retailstore-unspecified
---
apiVersion: v1
data:
  DB_ENDPOINT: catalog-mysql:3306
  DB_NAME: catalog
  DB_READ_ENDPOINT: catalog-mysql:3306
kind: ConfigMap
metadata:
  name: catalog
  namespace: retailstore-unspecified
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: mysql
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: catalog
    helm.sh/chart: catalog-0.8.4
  name: catalog-mysql
  namespace: retailstore-unspecified
spec:
  ports:
  - name: mysql
    port: 3306
    protocol: TCP
    targetPort: mysql
  selector:
    app.kubernetes.io/component: mysql
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/name: catalog
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: catalog
    helm.sh/chart: catalog-0.8.4
  name: catalog
  namespace: retailstore-unspecified
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/name: catalog
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: assets
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: assets
    helm.sh/chart: assets-0.8.4
  name: assets
  namespace: retailstore-unspecified
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kuberneres.io/owner: retail-store-sample
      app.kubernetes.io/component: service
      app.kubernetes.io/instance: assets
      app.kubernetes.io/name: assets
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kuberneres.io/owner: retail-store-sample
        app.kubernetes.io/component: service
        app.kubernetes.io/instance: assets
        app.kubernetes.io/name: assets
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: assets
        image: public.ecr.aws/aws-containers/retail-store-sample-assets:0.8.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health.html
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 3
        name: assets
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            memory: 60Mi
          requests:
            cpu: 10m
            memory: 10Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      securityContext: {}
      serviceAccountName: assets
      volumes:
      - emptyDir:
          medium: Memory
        name: tmp-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: carts
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: carts
    helm.sh/chart: carts-0.8.4
  name: carts
  namespace: retailstore-unspecified
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kuberneres.io/owner: retail-store-sample
      app.kubernetes.io/component: service
      app.kubernetes.io/instance: carts
      app.kubernetes.io/name: carts
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: '8080'
        prometheus.io/scrape: 'true'
      labels:
        app.kuberneres.io/owner: retail-store-sample
        app.kubernetes.io/component: service
        app.kubernetes.io/instance: carts
        app.kubernetes.io/name: carts
    spec:
      containers:
      - env:
        - name: JAVA_OPTS
          value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
        envFrom:
        - configMapRef:
            name: carts
        image: public.ecr.aws/aws-containers/retail-store-sample-cart:0.8.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 45
          periodSeconds: 3
        name: carts
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            memory: 560Mi
          requests:
            cpu: 10m
            memory: 360Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      securityContext:
        fsGroup: 1000
      serviceAccountName: carts
      volumes:
      - emptyDir:
          medium: Memory
        name: tmp-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: dynamodb
    app.kubernetes.io/instance: carts
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: carts
    helm.sh/chart: carts-0.8.4
  name: carts-dynamodb
  namespace: retailstore-unspecified
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/component: dynamodb
      app.kubernetes.io/instance: carts
      app.kubernetes.io/name: carts
  template:
    metadata:
      labels:
        app.kubernetes.io/component: dynamodb
        app.kubernetes.io/instance: carts
        app.kubernetes.io/name: carts
    spec:
      containers:
      - image: amazon/dynamodb-local:1.20.0
        imagePullPolicy: IfNotPresent
        name: dynamodb
        ports:
        - containerPort: 8000
          name: dynamodb
          protocol: TCP
        resources:
          limits:
            memory: 610Mi
          requests:
            cpu: 10m
            memory: 210Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: catalog
    helm.sh/chart: catalog-0.8.4
  name: catalog
  namespace: retailstore-unspecified
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kuberneres.io/owner: retail-store-sample
      app.kubernetes.io/component: service
      app.kubernetes.io/instance: catalog
      app.kubernetes.io/name: catalog
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: '8080'
        prometheus.io/scrape: 'true'
      labels:
        app.kuberneres.io/owner: retail-store-sample
        app.kubernetes.io/component: service
        app.kubernetes.io/instance: catalog
        app.kubernetes.io/name: catalog
    spec:
      containers:
      - env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: catalog-db
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: catalog-db
        envFrom:
        - configMapRef:
            name: catalog
        image: public.ecr.aws/aws-containers/retail-store-sample-catalog:0.8.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 3
        name: catalog
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            memory: 60Mi
          requests:
            cpu: 10m
            memory: 60Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      securityContext:
        fsGroup: 1000
      serviceAccountName: catalog
      volumes:
      - emptyDir:
          medium: Memory
        name: tmp-volume
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: mysql
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: catalog
    helm.sh/chart: catalog-0.8.4
  name: catalog-mysql
  namespace: retailstore-unspecified
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/component: mysql
      app.kubernetes.io/instance: catalog
      app.kubernetes.io/name: catalog
  serviceName: catalog-mysql
  template:
    metadata:
      labels:
        app.kubernetes.io/component: mysql
        app.kubernetes.io/instance: catalog
        app.kubernetes.io/name: catalog
    spec:
      containers:
      - env:
        - name: MYSQL_ROOT_PASSWORD
          value: my-secret-pw
        - name: MYSQL_DATABASE
          value: catalog
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: catalog-db
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: catalog-db
        image: public.ecr.aws/docker/library/mysql:8.0
        imagePullPolicy: IfNotPresent
        name: mysql
        ports:
        - containerPort: 3306
          name: mysql
          protocol: TCP
        resources:
          limits:
            memory: 960Mi
          requests:
            cpu: 10m
            memory: 510Mi
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: data
      volumes:
      - emptyDir: {}
        name: data
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: carts
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: carts
    helm.sh/chart: carts-0.8.4
  name: carts
  namespace: retailstore-unspecified
---
apiVersion: v1
data:
  AWS_ACCESS_KEY_ID: key
  AWS_SECRET_ACCESS_KEY: secret
  CARTS_DYNAMODB_CREATETABLE: 'true'
  CARTS_DYNAMODB_ENDPOINT: http://carts-dynamodb:8000
  CARTS_DYNAMODB_TABLENAME: Items
  SPRING_PROFILES_ACTIVE: dynamodb
kind: ConfigMap
metadata:
  name: carts
  namespace: retailstore-unspecified
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: dynamodb
    app.kubernetes.io/instance: carts
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: carts
    helm.sh/chart: carts-0.8.4
  name: carts-dynamodb
  namespace: retailstore-unspecified
spec:
  ports:
  - name: dynamodb
    port: 8000
    protocol: TCP
    targetPort: dynamodb
  selector:
    app.kubernetes.io/component: dynamodb
    app.kubernetes.io/instance: carts
    app.kubernetes.io/name: carts
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: carts
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: carts
    helm.sh/chart: carts-0.8.4
  name: carts
  namespace: retailstore-unspecified
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: carts
    app.kubernetes.io/name: carts
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: orders
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orders
    helm.sh/chart: orders-0.8.4
  name: orders
  namespace: retailstore-unspecified
---
apiVersion: v1
data:
  password: QTRZNWY4Q1djU1hZaWloYw==
  username: b3JkZXJz
kind: Secret
metadata:
  name: orders-db
  namespace: retailstore-unspecified
---
apiVersion: v1
data: null
kind: Secret
metadata:
  name: orders-rabbitmq
  namespace: retailstore-unspecified
---
apiVersion: v1
data:
  RETAIL_ORDERS_MESSAGING_PROVIDER: rabbitmq
  SPRING_DATASOURCE_URL: jdbc:postgresql://orders-postgresql:5432/orders
  SPRING_RABBITMQ_ADDRESSES: amqp://orders-rabbitmq:5672
kind: ConfigMap
metadata:
  name: orders
  namespace: retailstore-unspecified
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: postgresql
    app.kubernetes.io/instance: orders
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orders
    helm.sh/chart: orders-0.8.4
  name: orders-postgresql
  namespace: retailstore-unspecified
spec:
  ports:
  - name: postgresql
    port: 5432
    protocol: TCP
    targetPort: postgresql
  selector:
    app.kubernetes.io/component: postgresql
    app.kubernetes.io/instance: orders
    app.kubernetes.io/name: orders
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: rabbitmq
    app.kubernetes.io/instance: orders
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orders
    helm.sh/chart: orders-0.8.4
  name: orders-rabbitmq
  namespace: retailstore-unspecified
spec:
  ports:
  - name: amqp
    port: 5672
    protocol: TCP
    targetPort: amqp
  - name: http
    port: 15672
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/component: rabbitmq
    app.kubernetes.io/instance: orders
    app.kubernetes.io/name: orders
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: orders
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orders
    helm.sh/chart: orders-0.8.4
  name: orders
  namespace: retailstore-unspecified
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: orders
    app.kubernetes.io/name: orders
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: checkout
    helm.sh/chart: checkout-0.8.4
  name: checkout
  namespace: retailstore-unspecified
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kuberneres.io/owner: retail-store-sample
      app.kubernetes.io/component: service
      app.kubernetes.io/instance: checkout
      app.kubernetes.io/name: checkout
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: '8080'
        prometheus.io/scrape: 'true'
      labels:
        app.kuberneres.io/owner: retail-store-sample
        app.kubernetes.io/component: service
        app.kubernetes.io/instance: checkout
        app.kubernetes.io/name: checkout
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: checkout
        image: public.ecr.aws/aws-containers/retail-store-sample-checkout:0.8.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 3
        name: checkout
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            memory: 210Mi
          requests:
            cpu: 10m
            memory: 110Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      securityContext:
        fsGroup: 1000
      serviceAccountName: checkout
      volumes:
      - emptyDir:
          medium: Memory
        name: tmp-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: redis
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: checkout
    helm.sh/chart: checkout-0.8.4
  name: checkout-redis
  namespace: retailstore-unspecified
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/component: redis
      app.kubernetes.io/instance: checkout
      app.kubernetes.io/name: checkout
  template:
    metadata:
      labels:
        app.kubernetes.io/component: redis
        app.kubernetes.io/instance: checkout
        app.kubernetes.io/name: checkout
    spec:
      containers:
      - image: redis:6.0-alpine
        imagePullPolicy: IfNotPresent
        name: redis
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        resources:
          limits:
            memory: 10Mi
          requests:
            cpu: 10m
            memory: 10Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: orders
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orders
    helm.sh/chart: orders-0.8.4
  name: orders
  namespace: retailstore-unspecified
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kuberneres.io/owner: retail-store-sample
      app.kubernetes.io/component: service
      app.kubernetes.io/instance: orders
      app.kubernetes.io/name: orders
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: '8080'
        prometheus.io/scrape: 'true'
      labels:
        app.kuberneres.io/owner: retail-store-sample
        app.kubernetes.io/component: service
        app.kubernetes.io/instance: orders
        app.kubernetes.io/name: orders
    spec:
      containers:
      - env:
        - name: JAVA_OPTS
          value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: orders-db
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: orders-db
        envFrom:
        - secretRef:
            name: orders-rabbitmq
        - configMapRef:
            name: orders
        image: public.ecr.aws/aws-containers/retail-store-sample-orders:0.8.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 45
          periodSeconds: 3
        name: orders
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            memory: 560Mi
          requests:
            cpu: 10m
            memory: 310Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      securityContext:
        fsGroup: 1000
      serviceAccountName: orders
      volumes:
      - emptyDir:
          medium: Memory
        name: tmp-volume
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: postgresql
    app.kubernetes.io/instance: orders
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orders
    helm.sh/chart: orders-0.8.4
  name: orders-postgresql
  namespace: retailstore-unspecified
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/component: postgresql
      app.kubernetes.io/instance: orders
      app.kubernetes.io/name: orders
  serviceName: orders-postgresql
  template:
    metadata:
      labels:
        app.kubernetes.io/component: postgresql
        app.kubernetes.io/instance: orders
        app.kubernetes.io/name: orders
    spec:
      containers:
      - env:
        - name: POSTGRES_DB
          value: orders
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: orders-db
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: orders-db
        - name: PGDATA
          value: /data/pgdata
        image: public.ecr.aws/docker/library/postgres:16.1
        imagePullPolicy: IfNotPresent
        name: postgresql
        ports:
        - containerPort: 5432
          name: postgresql
          protocol: TCP
        resources:
          limits:
            memory: 160Mi
          requests:
            cpu: 10m
            memory: 110Mi
        volumeMounts:
        - mountPath: /data
          name: data
      volumes:
      - emptyDir: {}
        name: data
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: rabbitmq
    app.kubernetes.io/instance: orders
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: orders
    helm.sh/chart: orders-0.8.4
  name: orders-rabbitmq
  namespace: retailstore-unspecified
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/component: rabbitmq
      app.kubernetes.io/instance: orders
      app.kubernetes.io/name: orders
  serviceName: orders-rabbitmq
  template:
    metadata:
      labels:
        app.kubernetes.io/component: rabbitmq
        app.kubernetes.io/instance: orders
        app.kubernetes.io/name: orders
    spec:
      containers:
      - image: public.ecr.aws/docker/library/rabbitmq:3-management
        imagePullPolicy: IfNotPresent
        name: rabbitmq
        ports:
        - containerPort: 5672
          name: amqp
          protocol: TCP
        - containerPort: 15672
          name: http
          protocol: TCP
        resources:
          limits:
            memory: 310Mi
          requests:
            cpu: 10m
            memory: 160Mi
        volumeMounts:
        - mountPath: /var/lib/rabbitmq/mnesia
          name: data
      volumes:
      - emptyDir: {}
        name: data
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: checkout
    helm.sh/chart: checkout-0.8.4
  name: checkout
  namespace: retailstore-unspecified
---
apiVersion: v1
data:
  ENDPOINTS_ORDERS: http://orders:80
  REDIS_URL: redis://checkout-redis:6379
kind: ConfigMap
metadata:
  name: checkout
  namespace: retailstore-unspecified
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: redis
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: checkout
    helm.sh/chart: checkout-0.8.4
  name: checkout-redis
  namespace: retailstore-unspecified
spec:
  ports:
  - name: redis
    port: 6379
    protocol: TCP
    targetPort: redis
  selector:
    app.kubernetes.io/component: redis
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/name: checkout
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: checkout
    helm.sh/chart: checkout-0.8.4
  name: checkout
  namespace: retailstore-unspecified
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: checkout
    app.kubernetes.io/name: checkout
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: assets
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: assets
    helm.sh/chart: assets-0.8.4
  name: assets
  namespace: retailstore-unspecified
---
apiVersion: v1
data:
  PORT: '8080'
kind: ConfigMap
metadata:
  name: assets
  namespace: retailstore-unspecified
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: assets
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: assets
    helm.sh/chart: assets-0.8.4
  name: assets
  namespace: retailstore-unspecified
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: assets
    app.kubernetes.io/name: assets
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: ui
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ui
    helm.sh/chart: ui-0.8.4
  name: ui
  namespace: retailstore-unspecified
---
apiVersion: v1
data:
  ENDPOINTS_ASSETS: http://assets
  ENDPOINTS_CARTS: http://carts
  ENDPOINTS_CATALOG: http://catalog
  ENDPOINTS_CHECKOUT: http://checkout
  ENDPOINTS_ORDERS: http://orders
kind: ConfigMap
metadata:
  name: ui
  namespace: retailstore-unspecified
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: ui
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ui
    helm.sh/chart: ui-0.8.4
  name: ui
  namespace: retailstore-unspecified
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: ui
    app.kubernetes.io/name: ui
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kuberneres.io/owner: retail-store-sample
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: ui
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ui
    helm.sh/chart: ui-0.8.4
  name: ui
  namespace: retailstore-unspecified
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kuberneres.io/owner: retail-store-sample
      app.kubernetes.io/component: service
      app.kubernetes.io/instance: ui
      app.kubernetes.io/name: ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: '8080'
        prometheus.io/scrape: 'true'
      labels:
        app.kuberneres.io/owner: retail-store-sample
        app.kubernetes.io/component: service
        app.kubernetes.io/instance: ui
        app.kubernetes.io/name: ui
    spec:
      containers:
      - env:
        - name: JAVA_OPTS
          value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
        envFrom:
        - configMapRef:
            name: ui
        image: public.ecr.aws/aws-containers/retail-store-sample-ui:0.8.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 45
          periodSeconds: 3
        name: ui
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            memory: 560Mi
          requests:
            cpu: 10m
            memory: 360Mi
        securityContext:
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      securityContext:
        fsGroup: 1000
      serviceAccountName: ui
      volumes:
      - emptyDir:
          medium: Memory
        name: tmp-volume
